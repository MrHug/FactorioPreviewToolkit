[settings]

# === Factorio Executable Location ===

# Select how the tool locates the Factorio executable.
# Options:
#   fixed_path – Use a fixed folder path (see below)
#   active_window_monitor – Auto-detect the active Factorio instance from the last focused window. Unsupported on wayland.
factorio_locator_method = active_window_monitor

# Full path to the Factorio executable. Required if using `fixed_path` mode.
# Examples:
#   Windows: C:/Program Files/Factorio/bin/x64/factorio.exe
#   Linux:   /home/user/.factorio/bin/x64/factorio
#   macOS:   /Applications/factorio.app/Contents/MacOS/factorio or /Applications/factorio.app
fixed_path_factorio_executable = ./Factorio/bin/x64/factorio.exe

# How often to check the focused window (in seconds). Used in active_window_monitor mode.
factorio_locator_poll_interval_in_seconds = 2


# === Map Preview Generation ===

# Size (in pixels) of the generated map preview images (e.g., 2048, 3072, 4096).
map_preview_size = 3072

# === Sound Feedback ===

# Optional sound played when the generation starts
sound_start_filepath = ./assets/sounds/vibraphone-14.ogg
start_sound_volume = 0.2

# Optional sound played on successful generation
sound_success_filepath = ./assets/sounds/vibraphone-26.ogg
success_sound_volume = 0.2

# Optional sound played on generation failure
sound_failure_filepath = ./assets/sounds/saw-02.ogg
failure_sound_volume = 0.5


[map_exchange_input]

# Method used to provide the map exchange string.
# Options:
#   clipboard_monitor – Auto-detect valid map string from clipboard
#   file_monitor      – Watch a file for changes, useful when connected to another tool
map_exchange_input_method = clipboard_monitor

# How often to check for new map strings (in seconds)
map_exchange_input_poll_interval_in_seconds = 0.5

# Path to the map string file (used only in file_monitor mode)
# Example:
#   Windows/Linux/macOS: ./map_string.txt
file_monitor_filepath = ./map_string.txt


[upload]

# How previews should be uploaded:
# Options:
#   rclone      – Uploads the previews directly to a remote service (e.g., Dropbox) using (the bundled) rclone.
#                 The toolkit handles the upload automatically.
#   local_sync  – Only copies the previews to a local folder (e.g. local OneDrive folder).
#                 The user is responsible for setting up their own sync software to handle the actual cloud upload.
#   skip        – No upload at all. Use this if you don’t want to share previews with your audience.
upload_method = skip

# Path to the rclone executable. If set to "auto", will try to auto-detect for current OS/arch and uses the bundled  one.
# Examples:
#   Windows: ./third_party/rclone/rclone.exe
#   Linux:   ./third_party/rclone/rclone
#   macOS:   ./third_party/rclone/rclone
rclone_executable = auto

# Name of the rclone remote:
#   - "dropbox_auto" will trigger an automatic Dropbox-only setup and use the remote name 'FactorioPreviewToolkitDropbox'.
#     If no rclone config exists yet, one will be created automatically via `rclone config create`.
#     This works only with Dropbox and requires browser authorization.
#
#   - If set manually (e.g., dropbox, onedrive, gdrive), it must match a remote name configured via `rclone config`.
#     You must configure this manually yourself using `rclone config` on the rclone executable.
#     !!! Ensure the service supports direct, static image linking !!!
#     Some services (like Google Drive) do not support direct/public links by default and are not officially supported.
rclone_remote_service = dropbox_auto

# Remote folder inside your rclone target (e.g., FactorioPreviews/)
rclone_remote_upload_dir = FactorioPreviews/

# For local sync upload (only used if upload_method = local_sync)
# Absolute path to the local sync folder where previews should be copied
local_sync_target_dir = C:/OneDrive/FactorioPreviews/